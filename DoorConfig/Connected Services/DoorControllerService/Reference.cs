//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoorConfig.DoorControllerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Door", Namespace="http://schemas.datacontract.org/2004/07/DoorControllerService")]
    [System.SerializableAttribute()]
    public partial class Door : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpen {
            get {
                return this.IsOpenField;
            }
            set {
                if ((this.IsOpenField.Equals(value) != true)) {
                    this.IsOpenField = value;
                    this.RaisePropertyChanged("IsOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DoorControllerService.DoorControllerService", CallbackContract=typeof(DoorConfig.DoorControllerService.DoorControllerServiceCallback))]
    public interface DoorControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/GetDoors", ReplyAction="http://tempuri.org/DoorControllerService/GetDoorsResponse")]
        void GetDoors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/GetDoors", ReplyAction="http://tempuri.org/DoorControllerService/GetDoorsResponse")]
        System.Threading.Tasks.Task GetDoorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/UpdateDoor", ReplyAction="http://tempuri.org/DoorControllerService/UpdateDoorResponse")]
        void UpdateDoor(string id, DoorConfig.DoorControllerService.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/UpdateDoor", ReplyAction="http://tempuri.org/DoorControllerService/UpdateDoorResponse")]
        System.Threading.Tasks.Task UpdateDoorAsync(string id, DoorConfig.DoorControllerService.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/AddDoor", ReplyAction="http://tempuri.org/DoorControllerService/AddDoorResponse")]
        void AddDoor(DoorConfig.DoorControllerService.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/AddDoor", ReplyAction="http://tempuri.org/DoorControllerService/AddDoorResponse")]
        System.Threading.Tasks.Task AddDoorAsync(DoorConfig.DoorControllerService.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/DeleteDoor", ReplyAction="http://tempuri.org/DoorControllerService/DeleteDoorResponse")]
        void DeleteDoor(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/DeleteDoor", ReplyAction="http://tempuri.org/DoorControllerService/DeleteDoorResponse")]
        System.Threading.Tasks.Task DeleteDoorAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/Subscribe", ReplyAction="http://tempuri.org/DoorControllerService/SubscribeResponse")]
        bool Subscribe(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/Subscribe", ReplyAction="http://tempuri.org/DoorControllerService/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/UnSubscribe", ReplyAction="http://tempuri.org/DoorControllerService/UnSubscribeResponse")]
        bool UnSubscribe(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/UnSubscribe", ReplyAction="http://tempuri.org/DoorControllerService/UnSubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnSubscribeAsync(string clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DoorControllerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/OnDoorListReceived", ReplyAction="http://tempuri.org/DoorControllerService/OnDoorListReceivedResponse")]
        void OnDoorListReceived(DoorConfig.DoorControllerService.Door[] doors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/OnDoorUpdated", ReplyAction="http://tempuri.org/DoorControllerService/OnDoorUpdatedResponse")]
        void OnDoorUpdated(DoorConfig.DoorControllerService.Door door);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/OnDoorDeleted", ReplyAction="http://tempuri.org/DoorControllerService/OnDoorDeletedResponse")]
        void OnDoorDeleted(string id, bool success);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoorControllerService/OnDoorAdded", ReplyAction="http://tempuri.org/DoorControllerService/OnDoorAddedResponse")]
        void OnDoorAdded(DoorConfig.DoorControllerService.Door door);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DoorControllerServiceChannel : DoorConfig.DoorControllerService.DoorControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoorControllerServiceClient : System.ServiceModel.DuplexClientBase<DoorConfig.DoorControllerService.DoorControllerService>, DoorConfig.DoorControllerService.DoorControllerService {
        
        public DoorControllerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DoorControllerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DoorControllerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DoorControllerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DoorControllerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetDoors() {
            base.Channel.GetDoors();
        }
        
        public System.Threading.Tasks.Task GetDoorsAsync() {
            return base.Channel.GetDoorsAsync();
        }
        
        public void UpdateDoor(string id, DoorConfig.DoorControllerService.Door door) {
            base.Channel.UpdateDoor(id, door);
        }
        
        public System.Threading.Tasks.Task UpdateDoorAsync(string id, DoorConfig.DoorControllerService.Door door) {
            return base.Channel.UpdateDoorAsync(id, door);
        }
        
        public void AddDoor(DoorConfig.DoorControllerService.Door door) {
            base.Channel.AddDoor(door);
        }
        
        public System.Threading.Tasks.Task AddDoorAsync(DoorConfig.DoorControllerService.Door door) {
            return base.Channel.AddDoorAsync(door);
        }
        
        public void DeleteDoor(string id) {
            base.Channel.DeleteDoor(id);
        }
        
        public System.Threading.Tasks.Task DeleteDoorAsync(string id) {
            return base.Channel.DeleteDoorAsync(id);
        }
        
        public bool Subscribe(string clientId) {
            return base.Channel.Subscribe(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync(string clientId) {
            return base.Channel.SubscribeAsync(clientId);
        }
        
        public bool UnSubscribe(string clientId) {
            return base.Channel.UnSubscribe(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> UnSubscribeAsync(string clientId) {
            return base.Channel.UnSubscribeAsync(clientId);
        }
    }
}
